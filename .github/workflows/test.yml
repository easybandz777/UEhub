name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_uehub
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio pytest-cov httpx faker factory-boy
      
      - name: Lint with black and isort
        run: |
          cd backend
          pip install black isort
          black --check app/
          isort --check-only app/
      
      - name: Type check with mypy
        run: |
          cd backend
          pip install mypy
          mypy app/ --ignore-missing-imports
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_uehub
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-minimum-32-characters-long
          ENVIRONMENT: test
        run: |
          cd backend
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Lint
        run: pnpm lint
      
      - name: Type check
        run: |
          cd frontend
          pnpm type-check
      
      - name: Build packages
        run: pnpm build
      
      - name: Test frontend
        run: |
          cd frontend
          pnpm test --coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_uehub
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -e .
          cd ..
          pnpm install
      
      - name: Start backend
        run: |
          cd backend
          python -m uvicorn app.api:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_uehub
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-minimum-32-characters-long
          ENVIRONMENT: test
      
      - name: Run API tests
        run: |
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/openapi.json
      
      - name: Build frontend
        run: |
          cd frontend
          pnpm build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
